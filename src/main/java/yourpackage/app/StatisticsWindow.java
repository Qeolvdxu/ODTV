package yourpackage.app;

import com.intellij.uiDesigner.core.GridLayoutManager;
import yourpackage.parsing.DataField;
import yourpackage.parsing.NumericDataField;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;

public class StatisticsWindow {

    private JPanel mainPanelSW;
    private JList selectedFieldsJList;
    private JList minimumValuesJList;
    private JList maximumValuesJList;
    private JList averageValuesJList;
    private JList stdDevValuesJList;
    private final JFrame frame;
    private static ArrayList<DataField> selectedFields; // Fields found by the parser

    public StatisticsWindow() {
        frame = new JFrame();
        selectedFields = new ArrayList<>();
        String iconPath = System.getProperty("user.dir") + "/src/main/resources/drone.png";
        ImageIcon img = new ImageIcon(iconPath);
        frame.setIconImage(img.getImage()); // Get and set a custom icon for the GUI.
        frame.setContentPane(mainPanelSW);
        frame.setDefaultCloseOperation(0); // Window shouldn't be closeable, or else it will mess up the rest of the program's execution.
        frame.pack();
        frame.setResizable(false);
        frame.setTitle("Data Statistics");
        frame.setVisible(true);
    }

    private void populateSelectedFieldsJList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (DataField df : selectedFields) {
            listModel.addElement(String.valueOf(df));
        }
        selectedFieldsJList.setModel(listModel);
    }

    private void populateMinimumValuesJList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (DataField df : selectedFields) {
            if (df instanceof NumericDataField)
            {
                listModel.addElement(String.valueOf(((NumericDataField) df).getMinimum()));
            }
            else
                listModel.addElement(" ");
        }
        minimumValuesJList.setModel(listModel);
    }

    private void populateMaximumValuesJList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (DataField df : selectedFields) {
            if (df instanceof NumericDataField)
            {
                listModel.addElement(String.valueOf(((NumericDataField) df).getMaximum()));
            }
            else
                listModel.addElement(" ");
        }
        maximumValuesJList.setModel(listModel);
    }

    private void populateAverageValuesJList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (DataField df : selectedFields) {
            if (df instanceof NumericDataField)
            {
                listModel.addElement(String.valueOf(((NumericDataField) df).getAverage()));
            }
            else
                listModel.addElement(" ");
        }
        averageValuesJList.setModel(listModel);
    }

    private void populateStdDevValuesJList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (DataField df : selectedFields) {
            if (df instanceof NumericDataField)
            {
                listModel.addElement(String.valueOf(((NumericDataField) df).getStdDev()));
            }
            else
                listModel.addElement(" ");
        }
        stdDevValuesJList.setModel(listModel);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    }
}
